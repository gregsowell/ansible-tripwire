---
- name: Run a tripwire check
  ansible.builtin.command: tripwire --check
  register: tripwire_check
  failed_when: '"Integrity check complete." not in tripwire_check.stdout'

# - name: Extract the total violations
#   set_fact:
#     # total_violations: "{{ tripwire_check.stdout.split('\n') | select('search', 'Total violations found:') | first | regex_search('Total violations found: (\\d+)', '\\1') | int }}"
#     # total_violations: "{{ tripwire_check.stdout.split('\n') | select('search', 'Total violations found:') | first | regex_search('Total\\s+violations\\s+found:\\s*(\\d+)', '\\1') | int }}"
#     total_violations: "{{ tripwire_check.stdout.split('\n') | select('search', 'Total violations found:') | first | regex_search('Total\\s+violations\\s+found:\\s+(\\d+)', '\\1') | int }}"

- name: Find the line with "Total violations found:"
  set_fact:
    violations_line: "{{ tripwire_check.stdout.split('\n') | select('search', 'Total violations found:') | first }}"

- name: Debug the line found
  ansible.builtin.debug:
    msg: "Line with total violations: {{ violations_line }}"

- name: Extract the total violations from the line
  set_fact:
    # total_violations: "{{ violations_line | regex_search('Total\\s+violations\\s+found:\\s+(\\d+)', '\\1') | int }}"
    total_violations: "{{ violations_line | regex_search('\\d+') | int }}"

- name: Extract the file path from command output
  set_fact:
    report_file_path: "{{ tripwire_check.stdout.split('\n') | select('search', 'Wrote report file:') | first | regex_search('Wrote report file: (\\/.*\\.twr)', '\\1') }}"
